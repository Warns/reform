h2. Class API

**class reform.SecretsManager.SecretsManager(opts)**

   ``profile&#95;settings&#95;path = ['/Users/acollins/.s ... eform/.secretsManager']``

   ``cache&#95;keys = &#123;&#125;``

   ``key&#95;length = 2048``

   ``secrets&#95;file = 'secrets.json'``

   **serializeSettings()**

      This stores the last used bucket and key in the users home dir under SecretsManager::profile&#95;settings&#95;path

   **UnSerializeSettings()**

      This unserializes the settings that were stored in the serializeSettings.  This is helpful to reduce the amount of args that must be passed all the time,

   **getSecretPath(key=False)**

   **InteractiveEdit()**

      In interactive editing mode we decrypt our MasterSecretsVolume and show all secrets in all environments.  You can then add, edit or remove secrets at will.  When you exit the editor each environments secrets are split up and placed in their corresponding environment config file.

   **decryptSecretFile(env_secret)**

   **encryptSecretFile(plaintext_config, secret_file)**

   **secretEnecoderRing(secrets)**

      Steps thought our object and encrypts all the values

   **secretDecoderRing(secrets)**

      Steps thought our object and decrypts all the values

   **inputValidate(v)**

      Check to make sure a give argument was pissed and valid

   **secureUpload(b, bucket, path)**

      Securely upload files to s3 and mark them private so no one else can see them.

   **keyExists(key)**

      Checks if a given key exists in the specified s3 region and env

   **passwordGenerate(passlen)**

      This just makes a quick and dirty random password.

   **rsa&#95;encrypt(orig_message)**

      This Encrypts a string with the private key from the given environment. Uses RSA and/or AES depending on cipher arg given. If no arg given to init, defaults to PKCS1&#95;v1&#95;5

      Valid cipher options &#91;‘PKCS1&#95;v1&#95;5’,’RSA&#95;AES’,’PKCS1&#95;OAEP’&#93;

   **rsa&#95;decrypt(message, key=False)**

      This Decrypts a string with the private key from the given environment. Uses RSA and/or AES depending on cipher arg given. If no arg.cipher given to init, defaults to PKCS1&#95;v1&#95;5

      Valid cipher options &#91;‘PKCS1&#95;v1&#95;5’,’RSA&#95;AES’,’PKCS1&#95;OAEP’&#93;

      If the default key doesn’t work we try the previous key.old

   **stringToBase64()**

   **base64ToString()**

   **getPrivateKey(ext='')**

   **getPublicKey(ext='')**

   **getKey(key_path)**

      Fetches a file from S3 and caches it so we do not keep getting it

   **generateKeyPair()**

   **rekey()**

      Rotate key and decrypt data with old key and encrypt with new key

   **isBase64(message)**

**class reform.ConfigManager.ConfigManager(args)**

   **put(keys, item)**

   **get(attribute)**

   **read()**

   **upsert()**

   **delete()**

   **delete&#95;config()**

h2. Reform Tasks

**reform.tasks.p&#95;log(msg, severity='info')**

   This function will output to the console useful information.
