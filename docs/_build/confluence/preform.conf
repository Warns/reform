Preform is a big reason this project was created.  Terraform is wonderful but it’s missing a lot of important functionality like conditionals and loops.  Here’s where preform comes in.  Think of reform like a preprocessor.  It it uses the [Jinja2|http://jinja.pocoo.org/].

You can access your reform configs as config & secret

h2. Usage

{code:linenumbers=false|language=python}
Usage: reform [--core-opts] preform [--options] [other tasks here ...]

Docstring:
  A simple preprocessor for terraform that processes *\*.tf.tpl* files.
  This is how we work around terraforms lack of loops and conditionals.

  This is also how we seed our dynamic reform configs for state backend and and configs we've defined.

Options:
  -c STRING, --config=STRING     Which config file under configs/{quadrant} to
                                 use. (Default: config.json)
  -q STRING, --quadrant=STRING   Which quadrant to pre-process. (Available:
                                 [dev, stage, prod, sandbox])
{code}

h3. Example

{code:linenumbers=false|language=python}
{% for tenant in config['tenants'] %}
#Make module name match source folder name
module "{{tenant}}_swimlane" {
 admin_ips                     = "${local.admin_ips}"
 base_policy_arn               = "${module.acme_net.ansible_policy_arn}"
 bucket                        = "${var.bucket}"
 client_name                   = "{{tenant}}"
 ecs_key_name                  = "${aws_key_pair.master.key_name}"
 elastic_cache_engine_version  = "${var.elastic_cache_engine_version}"
 elastic_cache_instance_type   = "${var.elastic_cache_instance_type}"
 elastic_cache_maint_window    = "${var.elastic_cache_maint_window}"
 elastic_cache_param_group     = "${var.elastic_cache_param_group}"
 elastic_cache_snapshot_window = "${var.elastic_cache_snapshot_window}"
 key                           = "${var.key}"
 private_alb_subnets           = ["${module.acme_net.private_alb_subnets}"]
 private_ecs_subnets           = ["${module.acme_net.private_ecs_subnets}"]
 private_devops_security_group = "${module.acme_net.private_devops_security_group}"
 private_rds_subnets           = ["${module.acme_net.private_rds_subnets}"]
 private_redis_subnets         = ["${module.acme_net.private_redis_subnets}"]
 public_alb_subnets            = ["${module.acme_net.public_alb_subnets}"]
 public_vpn_security_group     = "${module.acme_net.vpn_security_group}"
 public_vpn_subnets            = ["${module.acme_net.public_vpn_subnets}"]
 primary_domain                = "{{config['tenants'][tenant]['domain']}}"
 region                        = "{{config['tenants'][tenant]['region']}}"
 services                      = {
  {% for service, value in config['tenants'][tenant]['services'].items() %}"{{service}}" = "{{value}}",
  {% endfor %}
 }
 source                        = "../../modules/acme_swimlane"
 vpc_name                      = "${var.vpc_name}"
 vpc_id                        = "${module.acme_net.vpc_id}"
}
output "{{tenant}}_swimlane_cloudfront_public_bucket_domain" {
 value = "${module.{{tenant}}_swimlane.cloudfront_public_bucket_domain}"
}
{% endfor %}
{code}
