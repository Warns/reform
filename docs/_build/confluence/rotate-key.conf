If your security policy requires you to rotate keys on a regular basis then you can use this task to do that for you.  It does the following.

# Moves your old keys from _&#91;S3Bucket&#93;/&#91;quadrant&#93;/SecretsMaster(.pub) &#45;&#62; &#91;S3Bucket&#93;/&#91;quadrant&#93;/SecretsMaster(.pub).old_
# Generates new keys and uploads them to _&#91;S3Bucket&#93;/&#91;quadrant&#93;/SecretsMaster_ and _&#91;S3Bucket&#93;/&#91;quadrant&#93;/SecretsMaster.pub_
# It then decrypts all the secrets in your secrets.json and re&#45;encrypts them with the new key.

{info}Since our [mkS3Bucket|mkS3Bucket#mks3bucket] task sets up our bucket to be encrypted and versioned we have a bit of a safety net if we accidentally nuke our SecretMaster keys or ever have to restore from a backup that weâ€™ve since rotated keys on.{info}

h2. Usage

{code:linenumbers=false|language=python}
Usage: reform [--core-opts] rotate-key [--options] [other tasks here ...]

Docstring:
  Rotate our RSA Keys.
  This will move our old keys to *\*.old* and generate a new key pair.
  It then walks through our configs and re-encrypts the secrets with the new
  keys

Options:
  -q STRING, --quadrant=STRING   Which quadrant to manage secrets for.
                                 (Available: [dev, stage, prod, sandbox])
{code}
