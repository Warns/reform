A lot of assumptions are made in this toolkit.  Things like how you should layout your terraform repo, default values, assumed best practices, etc.  I’m willing to wager I didn’t get it perfect on the first try.  This tool kit actually came as a result of me writing dozens of little individual tools and realizing I should take a page from AWS Cli and merge them into a single tool and create some unit test & docs just to make it appear grown up.

What I’m saying is if you like or use this toolkit and find a smarter way to do something _Please, Please_ open an issue and let me know.  As with any Open Source project I love pr’s and discussions.

h2. Style Guide

I currently only have a few requirements for PR’s.  It’s python so these are very generic rules.

# Follow the [Pep8|https://www.python.org/dev/peps/pep-0008/?] standard.
# Use var & def names that make sense and are not offesive.
# Include a unit test where applicable.
# Provide as much detail as possible in the PR for why you need this and what is wrong. This is a side project, so if I have to spend a long time trying to decipher your intent even if it’s a really awesome idea I’ll avoid it.

With that said if you want to do development on this tool then you should install it in edit mode.

{code:linenumbers=false|language=bash}
$ pip install -e reform
{code}

h2. Viewing/Editing Docs

To rebuild the docs do this from the reform repo

{code:linenumbers=false|language=bash}
$ cd docs && make html
{code}

If it completes without error, the open the docs and test them  (From docs dir)

{code:linenumbers=false|language=bash}
$ open build/html/index.html
{code}

In MacOS this will open the docs in your browser of choice
