The cryptic task is how we encrypt and decrypt data.

{warning}By default your plaintext message you intend to encrypt must be no greater than _key.modulus &#45; 11_.  (Example: For a 2048 bit key you would have 2048/8 = 256 &#45;11 = 245 available characters for a secret). We say this is by default because this is a limitation with RSA which is what Terraform supports natively via the rsadecrypt function which uses PKCSv1.5.  Have no fear we have a workaround, you can provide a {{&#45;&#45;cipher=RSA&#95;AES}} arg to the above command and it will use RSA&#43;AES which allows for much larger messages sizes.  See the full usage documentation for the cryptic function for more info.Why isn’t this the default since it’s more secure and better&#63;  Well as I stated above terraform has a builtin rsadecrypt function. It wont work with our RSA&#95;AES cipher, so in order to decrypt a string encrypted this way with terraform at runtime you will have to use the data external resource type to decrypt your string on the fly.  See below for more details.{warning}

h2. Usage

{code:linenumbers=false|language=python}
Usage: reform [--core-opts] cryptic [--options] [other tasks here ...]

Docstring:
  Handle message crypting.
  If you need to encrypt or decrypt a message specify the quadrant and action.
  For messages that need to be larger than the modulus of the key use RSA_AES,
  This cipher wont work natively with Terraform so use a data external to have
  this tool decrypt your big strings at runtime.

Options:
  -c STRING, --cipher=STRING     Which cipher to use. (Available: [PKCS1_v1_5
                                 (default), RSA_AES, PKCS1_OAEP])
  -d STRING, --decrypt=STRING    Cipher-text message to decrypt
  -e STRING, --encrypt=STRING    Plaintext message to encrypt
  -o STRING, --output=STRING     Specify your output method. (Available: [text
                                 (default), json])
  -q STRING, --quadrant=STRING   The quadrant to use for crypting messages.
                                 (Available: [dev, stage, prod, sandbox])
{code}
