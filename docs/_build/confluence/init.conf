Before terraform can run we need to initialize it.  The init process sets up the backend for state management and insures we donâ€™t collide quadrants.  It also attempts to be helpful by doing a clean and preform to remove old cached files and process any preform templates.

h2. Usage

{code:linenumbers=false|language=python}
Usage: reform [--core-opts] init [--options] [other tasks here ...]

Docstring:
  Before terraform can run we need to initialize it.
  The init process sets up the backend for state management and insures we don't collide quadrants.

Options:
  -p STRING, --project=STRING    Which project do we want to init. (Available:
                                 [infrastructure, services])
  -q STRING, --quadrant=STRING   Which quadrant to init. (Available: [dev,
                                 stage, prod, sandbox])
{code}

h3. Example

{code:linenumbers=false|language=bash}
$ reform init --project infrastructure --quadrant dev
INFO: Task: Init
INFO: Task: Clean
INFO: Task: Preform
Initializing modules...
- module.acme_net
  Getting source "../../modules/acme_net"
- module.acme_cluster
  Getting source "../../modules/acme_swimlane"
- module.tesla_cluster
  Getting source "../../modules/acme_swimlane"
- module.acme_net.private_devops_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.public_alb_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_alb_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.public_vpn
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_ecs_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_rds_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_redis_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.public_rds_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.natgw_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_cluster.ecs
  Getting source "../autoscale_instance"
- module.acme_cluster.acme_api_rds
  Getting source "../rds_pgsql"
- module.acme_cluster.robot_rds
  Getting source "../rds_pgsql"
- module.acme_cluster.url_mini_rds
  Getting source "../rds_pgsql"
- module.tesla_cluster.ecs
  Getting source "../autoscale_instance"
- module.tesla_cluster.acme_api_rds
  Getting source "../rds_pgsql"
- module.tesla_cluster.robot_rds
  Getting source "../rds_pgsql"
- module.tesla_cluster.url_mini_rds
  Getting source "../rds_pgsql"

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "template" (1.0.0)...
- Downloading plugin for provider "aws" (1.39.0)...
- Downloading plugin for provider "null" (1.0.0)...
- Downloading plugin for provider "external" (1.0.0)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.aws: version = "~> 1.39"
* provider.external: version = "~> 1.0"
* provider.null: version = "~> 1.0"
* provider.template: version = "~> 1.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
{code}
