This will run a terraform plan and show you some proposed changes.  You should always use this when you make a change to your terraform project and you want to check what the terraform is proposing to change.

h2. Usage

{code:linenumbers=false|language=python}
Usage: reform [--core-opts] plan [--options] [other tasks here ...]

Docstring:
  This does a standard terraform plan in the project specified.
  It also requires to quadrant to specify what to propose changes for.

Options:
  -p STRING, --project=STRING    Which project do we want to terraform plan.
                                 (Available: [infrastructure, services])
  -q STRING, --quadrant=STRING   Which quadrant to plan. (Available: [dev,
                                 stage, prod, sandbox])
{code}

h3. Example

{code:linenumbers=false|language=bash}
$ reform plan --project infrastructure --quadrant dev
INFO: Task: Plan
INFO: Task: Init
INFO: Task: Clean
INFO: Task: Preform
Initializing modules...
- module.acme_net
  Getting source "../../modules/acme_net"
- module.acme_cluster
  Getting source "../../modules/acme_swimlane"
- module.tesla_cluster
  Getting source "../../modules/acme_swimlane"
- module.acme_net.private_devops_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.public_alb_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_alb_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.public_vpn
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_ecs_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_rds_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.private_redis_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.public_rds_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_net.natgw_subnets
  Getting source "../multi_az_subnet_config"
- module.acme_cluster.ecs
  Getting source "../autoscale_instance"
- module.acme_cluster.acme_api_rds
  Getting source "../rds_pgsql"
- module.acme_cluster.robot_rds
  Getting source "../rds_pgsql"
- module.acme_cluster.mini_rds
  Getting source "../rds_pgsql"
- module.tesla_cluster.ecs
  Getting source "../autoscale_instance"
- module.tesla_cluster.acme_api_rds
  Getting source "../rds_pgsql"
- module.tesla_cluster.robot_rds
  Getting source "../rds_pgsql"
- module.tesla_cluster.mini_rds
  Getting source "../rds_pgsql"

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "template" (1.0.0)...
- Downloading plugin for provider "aws" (1.39.0)...
- Downloading plugin for provider "external" (1.0.0)...
- Downloading plugin for provider "null" (1.0.0)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.aws: version = "~> 1.39"
* provider.external: version = "~> 1.0"
* provider.null: version = "~> 1.0"
* provider.template: version = "~> 1.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

null_resource.subnet_prefetch: Refreshing state... (ID: ****************)
null_resource.lambda_zip: Refreshing state... (ID: ****************)
data.terraform_remote_state.state: Refreshing state...
null_resource.subnet_prefetch: Refreshing state... (ID: ****************)
data.external.tagger: Refreshing state...
....

------------------------------------------------------------------------
An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  ~ module.acme_net.aws_cloudtrail.audit
      event_selector.#:                           "0" => "1"
      event_selector.0.include_management_events: "" => "true"
      event_selector.0.read_write_type:           "" => "All"



Plan: 0 to add, 1 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
{code}
