One of the hardest problems to solve with Infrastructure as Code is secret management. Several tools have been developed that can hold the secrets and in fact Hashicorp has a wonderful tool set Consul &#43; Vault to do this.  In fairness though Consul &#43; Vault is rather complicated to set up and has a normal Hashicorp learning curve.  If you need something simple from the start that requires little setup then use this secret manager.

h2. High level overview

Create a secure S3 bucket.  What do we mean by secure&#63;  It should have limited access and be configured with encryption at rest via KMS and versioning.

{code:linenumbers=false|language=bash}
$ reform mkS3Bucket --region us-east-1 --bucket acme-devops-secrets
{code}

Now that we have our bucket we can generate our keys that we will store in our bucket.

{code:linenumbers=false|language=bash}
$ reform key-gen --region us-east-1 --bucket acme-devops-secrets --quadrant dev
{code}

Ok, now that we have our bucket and our keys stored securely in our bucket we can encrypt our secrets.  We’ll use the cryptic tasks for this.

{code:linenumbers=false|language=bash}
$ export ENCRYPTED_RDS_PASSWORD=$(reform cryptic --encrypt='SuperS3c4TP@ssw0rd' --quadrant dev)
{code}

Last we need to store our secret in our reform configs for use in terraform.  We’ll use the config&#45;set task for this.

{code:linenumbers=false|language=bash}
$ reform config-set --attribute tenant.acme.rds_password --value ${ENCRYPTED_RDS_PASSWORD}
{code}

Alternatively a simpler way to edit secrets is to use the interactive secrets editor

{code:linenumbers=false|language=bash}
$ reform secrets --quadrant dev --cipher RSA_AES
{code}

That’s it, we now have a variable available to both preform and terraform that contains an encrypted secret.  Now while it’s generally frowned upon to store secrets in code you can reset assured that the secrets are useless without the keys securely stored in your S3 bucket
